createdAt: "2018-02-08T00:57:00.255Z"
updatedAt: "2018-02-10T00:48:08.921Z"
type: "MARKDOWN_NOTE"
folder: "3246ddbd6f8814128f2f"
title: "Arcanist 用户指南"
content: '''
  # Arcanist 用户指南
  
  Arcanist 是 Phabricator 的命令行交互工具。
  
  Arcanist 提供一系列终端命令来使用 Phabricator 的工具（例如 Differential, Files, Paste, ...），继承了统计分析工具 ("lint") 和单元测试工具，并且管理常见的 workflow, 例如将更改提交到 Differential 以待 review.
  
  Arcanist 更具体的参考资料可以敲入 `arc help` 来获得，本文只提供常见 workflow 的介绍和安装流程。
  
  Arcanist 面向贡献者的 API 文档请移步 [Arcanist 技术文档]()
  
  ## 快速上手
  参考  [Arcanist 快速上手]()，但是快熟上手之提供最精简的指引，如果你遇到的问题，老实看这篇吧
  
  ## 简述
  
  Arcanist 是一系列工具（例如  Differential, linter, unit test frameworks, git, Mercurial, SVN, ...）之上的脚本封装，并且提供了很多简单的命令行指令来管理 code review 和一些相关的版本控制操作。
  
  了解所有指令细节，运行：
  
      $ arc help
      
  对每一条指令详细了解，运行：
  
      $ arc help <command>
      
  Arcanist 本身允许你做的是事情有：
  - 得到所有指令细节 `arc help`
  - 把代码提交到 Differential 以待 review `arc diff` (详细的指引，请移步 [Arcanist 用户指南：arc diff]())
  - 显示 pending revision 的信息 `arc list`
  - 找到合适的审核人来 review `arc cover`
  - 将修订版本中的更改应用于工作副本 `arc patch`
  - 下载 Differential 中的补丁 `arc export`
  - 在 review 之后，更新 Git 提交信息 `arc amend`
  - 提交 SVN 的修改 `arc commit`
  - 推送 Git 和 Mercurial 的修改 `arc land`
  - 关于 Git 分支的增强信息 `arc branch`
  
  一旦你配置了 lint 和单元测试功能，你还能完成：
  - 检查你代码中的语法错误和代码风格问题 `arc lint` (详细的指引，请移步 [Arcanist 用户指南：Lint]())
  - 在你的改动之上运行单元测试 `arc unit`
  
  集成 Arcanist 的其他工具之后：
  - 上传和下载文件 `arc upload` `arc download`
  - 查看和创建 paste  `arc paste`
  
  Arcanist 还有一些高级的功能，你可以：
  - 执行 Conduit 方法的调用 `arc call-conduit`
  - 创建或者更新 libphutil 库文件 `arc liberate`
  - 激活 tab 键自动补全 `arc shell-complete`
  - 或者你可以自己拓展 Arcanist, 添加新工具（拍肩
  
  除非另外说明，以上命令和是底层版本管理系统无关，并且可以在 git, Mercurial, SVN 中正常工作。
  
  ## 安装 Arcanist
  
  Arcanist 需要安装带你的本地或者开发服务器上——即你需要进行代码编辑的机器。Arcanist 可以在以下环境运行：
  
  - Linux
  - 其他类 Linux 操作系统
  - FreeBSD
  - Mac OS X (参考 [Arcanist 配置：Mac OS X]())
  - Windows (参考 [Arcanist配置：Windows]())
  
  Arcanist 是用 PHP 开发的，如果你没有 PHP，需要先安装 PHP CLI. Arcanist 可以在 PHP 5.2 及更新的版本上运行。你可以前往 http://www.php.net/ 下载。
  
  安装 Arcanist, 首先选一个文件夹，然后从 Github 上克隆以下代码仓库：
  
      some_install_path/ $ git clone https://github.com/phacility/libphutil.git
      some_install_path/ $ git clone https://github.com/phacility/arcanist.git
      
  你的目录节结构如下：
  
      some_install_path/    # Wherever you chose to install it.
          arcanist/           # Arcanist-specific code and libraries.
          libphutil/          # A shared library Arcanist depends upon.
  
  现在将 `some_install_path/arcanist/bin/` 添加到环境变量。你键入 `arc`, 你应该看到这样的显示：
      
      Usage Exception: No command provided. Try 'arc help'.
      
  你可以通过 `arc upgrade` 来升级 Arcanist 和 libphutil 到最新的版本：
  
      $ arc upgrade
      
  ## 安装 Tab 自动补全
  
  如果你使用 `bash`, 要设置 tab 自动补全，可以在你的 `.bashrc`, `.profile` 类似文件添加如下内容：
  
      source /path/to/arcanist/resources/shell/bash-completion
      
  ## 配置
  
  一些 Arcanist 命令可以被配置，配置文件按照以下的**顺序**读取：
  
  1. 一个项目的专用配置可以在项目根目录下的 `.arcconfig` 文件中修改。这个文件是 JSON 格式的，你可以使用 `arc set-config --local` 改变配置，也可以手动修改配置文件。
  2. 用户配置从 `~/.arcrc` 文件读取，这个文件是 JSON 格式的，可以使用 `arc set-config` 来修改配置。
  3. 主机配置从 `/etc/arcconfig` 中读取 （在 Windows 环境，读取路径为 `C:\\ProgramData\\Phabricator\\Arcanist\\config` ）
  
  Arcanist 使用第一次读取到的配置。
  
  当前的设置可以使用 `arc get-config` 打印出来。
  
  使用 `arc help set-config` 和 `arc help get-config` 获得更多的信息。
'''
tags: []
isStarred: false
isTrashed: false
