createdAt: "2018-03-09T23:22:31.097Z"
updatedAt: "2018-03-14T03:57:30.428Z"
type: "MARKDOWN_NOTE"
folder: "5c96f0840146633d247b"
title: "Docker 入门到实践 笔记 --- （1）使用镜像"
content: '''
  # Docker 入门到实践 笔记 --- （1）使用镜像
  
  ## Docker 历史
  
  最初实现基于 [LXC](https://linuxcontainers.org/lxc/introduction/), 从 0.7 版本之后开始去除 LXC, 转而使用自行开发的 [libcontainer](https://github.com/docker/libcontainer), 从 1.11 版本开始，进一步演进为 [runC](https://github.com/opencontainers/runc) 和 [containerd](https://github.com/containerd/containerd) 。
  
  Docker 与传统虚拟机化方法的不同之处：
  
  ![docker 框架图](https://raw.githubusercontent.com/dchen23/boost_note_online/master/Images/docker.png)
  
  ![虚拟机框架图](https://raw.githubusercontent.com/dchen23/boost_note_online/master/Images/virtualization.png)
  
  
  | 特性 | 容器 | 虚拟机 |  
  | ----- | ----- | -------- |
  | 启动 | 秒级 |	分钟级
  | 硬盘使用 |	一般为 MB |	一般为 GB
  | 性能 |	接近原生系统 |	弱于原生系统
  | 系统支持量 | 单机支持上千个容器 |	一般几十个
  
  ## 基本概念
  
  Docker 主要有三个基本概念：
  
  - 镜像 (Image)
  - 容器 (Container)
  - 仓库 (Repository)
  
  ### 镜像 (Image)
  
  一般的 Linux 而言，内核启动之后， 会挂载 `root` 文件系统为其提供用户支持。而镜像 (Image), 就相当于一个 `root` 文件系统。
  
  因为镜像包含操作系统完整的 `root` 文件系统，其体积往往非常庞大，因此在 Docker 设计时，就充分利用了 [Union FS](https://en.wikipedia.org/wiki/Union_mount) 的技术，将其设计为分层存储的架构。
  
  镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。
  
  ### 容器 (Container)
  
  镜像和容器的关系，就像面向对象编程中 `class` 和 `instance` 一样，镜像是静态的定义，容器是镜像运行时的实体。
  
  容器的实质是进程，但与直接在 `host` 执行的进程不同，容器进程运行于自己的独立 [命名空间](https://en.wikipedia.org/wiki/Linux_namespaces) 。
  
  前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为**容器存储层**。
  
  容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。
  
  按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 `Volume` 、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。
  
  数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。
  
  ## 使用镜像
  
  ### 列出镜像
  
  想列出已经下载的镜像，可以使用 `docker image ls` 命令。
  
  输出的列表包含了 `REPOSITORY`, `TAG`, `IMAGE ID`, `CREATED`, `SIZE` 。
  
  `IMAGE ID` 是镜像的唯一标识，一个镜像可以对应多个 `TAG` 。
  
  ### 镜像体积
  
  在 Docker Hub 中显示的体积是压缩后的体积，而 `docker image ls` 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。
  
  `docker image ls` 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。
  
  使用 `docker system df` 来便捷的查看镜像、容器、数据卷所占用的空间。
  
  ### 虚悬镜像 (dangling image)
  
  由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 `<none>` 的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image) ，可以用命令 `docker image ls -f dangling=true` 专门显示这类镜像。一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用命令 `docker image prune` 删除。
  
  ### 中间层镜像
  
  为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 `docker image ls` 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 `-a` 参数。
  
      $ docker image ls -a
      
  这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错
      
  ### 列出部分镜像
  
  - 根据仓库名列出镜像
  
        $ docker image ls ubuntu
        
  - 指定仓库名和标签的镜像
  
        $ docker image ls ubuntu:16.04
        
  - 添加过滤器参数 `--filter`, 或者简写 `-f`
  
        $ docker image ls -f since=mongo:3.2
        
     想查看某个位置之前的镜像也可以，只要把 `since` 换成 `before` 即可。
     
  ### 以特定格式显示
  
  - `-q` 产生出指定范围的 ID 列表
  
        $ docker image ls -q
        
  - 只包含镜像 ID 和仓库名
  
        $ docker image ls --format "{{.ID}}: {{.Repository}}"
        
  - 以表格等距显示，并且有标题栏的自定义列表
  
        $ docker image ls --format "table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}"
        
  > 跟多的自定义格式可以参考 [Go 的模板语法](https://gohugo.io/templates/introduction/) 。
        
  ## 删除本地镜像
  
  使用 `docker image rm` 命令，其格式为:
  
      $ docker image rm [选项] <镜像1> [<镜像2> ...]
      
  可以通过 `ID` 来删除镜像，一般取前3个字符以上，就足够区分于别的镜像：
  
      $ docker image rm 501
      
  也可以用 `镜像名`， 也就是 `<仓库名>:<标签>` , 来删除镜像：
  
      $ docker image rm centos
      
  更精确的是使用 `摘要` 删除镜像：
  
      $ docker image ls --digests
      REPOSITORY           TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE
      node                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        3 weeks ago         214 MB
  
      $ docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228
  
  ### Untagged 和 Deleted
  
  镜像删除行为分为两类，一类是 `Untagged`，另一类是 `Deleted`。我们之前介绍过，镜像的唯一标识是其 `ID` 和 `摘要`，而一个镜像可以有多个标签。
  
  因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 `Untagged` 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 `Delete` 行为就不会发生。所以并非所有的 `docker rmi` 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。
  
  当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 `docker pull` 看到的层数不一样的源。
  
  除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。
  
  ### 用 `docker image ls` 命令来配合
  
  可以使用 `docker image ls -q` 来配合使用 `docker image rm`，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。
  
  比如，我们需要删除所有仓库名为 `redis` 的镜像：
  
      $ docker image rm $(docker image ls -q redis)
  或者删除所有在 mongo:3.2 之前的镜像：
  
      $ docker image rm $(docker image ls -q -f before=mongo:3.2)
  充分利用你的想象力和 Linux 命令行的强大，你可以完成很多非常赞的功能。
  
  ### 利用 commit 理解镜像构成
  
  > docker commit 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 docker commit 定制镜像，定制镜像应该使用 Dockerfile 来完成。
  
  镜像是容器的基础，每次执行 `docker run` 的时候都会指定哪个镜像作为容器运行的基础。在之前的例子中，我们所使用的都是来自于 Docker Hub 的镜像。直接使用这些镜像是可以满足一定的需求，而当这些镜像无法直接满足需求时，我们就需要定制这些镜像。
  
  回顾一下之前我们学到的知识，镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。
  
  现在让我们以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。
  
      $ docker run --name webserver -d -p 80:80 nginx
  这条命令会用 nginx 镜像启动一个容器，命名为 webserver，并且映射了 80 端口，这样我们可以用浏览器去访问这个 nginx 服务器。
  
  直接用浏览器访问 http://localhos ，我们会看到默认的 Nginx 欢迎页面。
  
  如果我们要替换这个默认初始页面，我们可以使用 docker exec 命令进入容器，修改其内容:
      
      $ docker exec -it webserver bash
      root@3729b97e8226:/# echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
      root@3729b97e8226:/# exit
      exit
      
  现在我们再刷新浏览器的话，会发现内容被改变了。
  
  我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过 docker diff 命令看到具体的改动：
  
      $ docker diff webserver
      C /root
      A /root/.bash_history
      C /run
      C /usr
      C /usr/share
      C /usr/share/nginx
      C /usr/share/nginx/html
      C /usr/share/nginx/html/index.html
      C /var
      C /var/cache
      C /var/cache/nginx
      A /var/cache/nginx/client_temp
      A /var/cache/nginx/fastcgi_temp
      A /var/cache/nginx/proxy_temp
      A /var/cache/nginx/scgi_temp
      A /var/cache/nginx/uwsgi_temp
      
  现在我们定制好了变化，我们希望能将其保存下来形成镜像。
  
  要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 `docker commit` 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。
  
  `docker commit` 的语法格式为：
  
      docker commit [选项] <容器ID或容器名> [<仓库名>[:<标签>]]
      
  利用如下命令将容器保存为镜像：
  
      $ docker commit --auther "Dingyi Chen <hithinkother@gmail.com> --message "修改了默认主页" webserver nginx:v2
      
  其中 `--author` 是指定修改的作者，而 `--message` 则是记录本次修改的内容。这与 `git` 版本控制相似，不过这里这些信息可以省略。
  
  我们还可以用 `docker history` 具体查看镜像内的历史记录：
  
      $ docker history nginx:v2
      
  ### 慎用 `docker commit` !
  
  使用 `docker commit` 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。
  
  首先，如果仔细观察之前的 `docker diff webserver` 的结果，你会发现除了真正想要修改的 `/usr/share/nginx/html/index.html` 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，如果不小心清理，将会导致镜像极为臃肿。
  
  此外，使用 `docker commit` 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体在操作的。虽然 `docker diff` 或许可以告诉得到一些线索，但是远远不到可以确保生成一致镜像的地步。这种黑箱镜像的维护工作是非常痛苦的。
  
  而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 `docker commit` 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。
'''
tags: []
isStarred: false
isTrashed: false
