type: "MARKDOWN_NOTE"
folder: "25e447a4d8a6df4b48b4"
title: "python note"
content: '''
  # python note
  
  ## Features compare to static programming language
  - Two basic types: String and Numbers.
  - No declaration or data type definition is needed for variables.
  - python do not have `switch` statement, use `if ... elif ... else` instead.
  - `while` statement and `for` statement can have an optional `else` clause.
  - if you `break` out of a `for` or `while` loop, any corresponding loop `else` block is **not** execute.
  
  
  ## 3. Functions
  - when we declare a starred parameter such as `*param`, then all the positional arguments from that point till the end are collected as a **tuple** called *param*.
  - when we declare a double-starred parameter such as `**param`, then all the keyword arguments from that point till the end are collected as a **dictionary** called *param*.
  - `return` statement without a value is equivalent to `return None` statement.
  - Every function implicitly contains a `return None` statement at the end unless you have written your own `return` statement.
  - The `pass` statement is used in Python to indicate an empty block of statements.
  - A string on the first logical line of a function is the *docstring* for that function. Same to **modules** and **classes**.
  
  ## 4. Modules
  - Run `import os; print(os.getcwd())` to find out the current directory of your program.
  - `sys.path` which is same as the `PYTHONPATH` environment variable. The first string in `sys.path` is empty - this empty string indicates that the current directory is also part of `sys.path`.
  - `.pyc` these byte-compiled files are platform-independent.
  - If Python does not have permission to write to files in that directory, then `.pyc` files will *not* be created.
  - In general, *avoid* using the `from...import` statement, use `import` instead. In order to avoid name clashes and will be more readable.
  - Every Python modules has its `__name__` defined. If this is `__main__`, that implies that the module is being run standlone by the user.
  - Built-in `dir()` fuction return list of names defined by an *object*. (try `vars()` out)
  - `del` statement is used to *delete* a variable/name. And delete object will not in `dir()` result.
  - Packages are just folders of modules with a special `__init__.py` file.
  - Packages hold modules, modules hold fuctions and clazz, fuctions hold variable.
  
  ## 5. Data Structures - 4 built-in DS - *list, tuple, dictionary and set*
  - list is a mutable data type.
  - tuples are immutable data type like strings.
  - `empty = ()` and `single = (2, )` for 0 or 1 items tuple.
  - you can use only immutable objects (like strings) for the keys of a dictionary but you can use either immutable or mutable objects for the values of the dictionary.
  - dictionary is a mutable data type.
  - Lists, tuples and strings are examples of *sequences*.
  - The major features of sequences are *membership tests* (i.e. the `in` and `not in` expressions), *indexing operations* (i.e. `a[2][2]`) and *slicing operation* (i.e. `a[1:-1]`, `a[::2]`).
  - Sets are unordered collections of simple objects. Sets are mutable.
  - When you create an object and assign it to a variable, the variable only *refers* to the object and does not represent the object itself. The variable name points to that part of your computer's memory where the object is stored. This is called *binding* the name to object.
  - `a[1:3]` returns a slice of the sequence starting at position 1, includes position 2 but stops at position 3(but do not change the refer to the original sequence). `a[:]` returns a copy of whole sequence.
  - if you want to make a copy of sequences or complex objects (not simple objects such as integers), then you have to use the *slicing operation* or `copy()` fuction. Otherwise will refer to the same object.
  
  ## 6. OOP
  - the`__init__` method is run as soon as an object of a class is instantiated.
  - **fields** are of two types - they can belong to each instance of the class or they can belong to the class itself. They are called **instance variables** and **class variables** respectively.
  - **class variables** are shared -- they can be accessed by all instances of that class. There is only one copy of the class variable and when any one object make a change to a class variable, that change will be seen by all other instances.
  - **instance varibales** are owned by each individual instance if the class. In this case, each object has its own copy of the fields.
  - class variable is refered as `<class_name>.<variable_name>` or `self.__class__.<variable_name>`.
  - instance variable is refered as `self.<variable>`
  - every instance refers to its class via the `self.__class__`attribute.
  - we can define a **classmethod/staticmethod** by using a decorator `@classmethod`.
  - `@classmethod` decorator is same as calling:
      `<method_name> = classmethod(<method_name>)`
  - all class member are public except using *double underscore prefix* such as `__private_var`.
  - We can access the class docstring at runtime using `<class_name>.__doc__` and the method docstring as `<class_name>.<method_name>.__doc__`.
  - All class members (including the data members) are *public* and all the methods are *virtual* in Python.
  - the convention followed is that any variable that is to be used only within the class or object should begin with an underscore and all other names are public and can be used by other classes/objects. *And this is only a convention and is not enforced by Python (except for the double underscore prefix)*.
  - 
'''
tags: [
  "python"
]
isStarred: true
createdAt: "2017-05-19T21:52:01.308Z"
updatedAt: "2017-06-16T09:57:14.748Z"
