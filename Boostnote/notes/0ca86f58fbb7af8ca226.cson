createdAt: "2018-02-11T06:05:29.499Z"
updatedAt: "2018-03-20T04:31:17.369Z"
type: "MARKDOWN_NOTE"
folder: "3246ddbd6f8814128f2f"
title: "Rokid 专用操作"
content: '''
  # Rokid 专用操作
  
  ## 代码提交
  
  如果不使用 Phabricator 的 Review 系统 Differential, 那么提交代码的操作和普通 Git 系统一样。
  
  如果要使用 Differential 来 review 代码，需要如下操作：
  
  首先配置 Arcanist 命令行工具，参阅 [Arcanist 快速上手](), [Arcanist 用户指南]()
  
  然后在命令行运行：
  
      git add .
      git commit -m "whatyouwanttosay"
      arc diff
    
  按照提示在文档中填写相应的内容，然后键入：
  
      arc land
      
  
  ## 代码迁移
  
  首先，在 Phabricator 系统的 Diffusion 点击 New Repository, 选择 Create a New Hosted Repository, 类型选择 Git, 然后输入项目相关信息
  
  然后，删除原先的远程分支，在 Phabricator 上找到项目的 Clone(SSH) 或者 Clone(HTTP)  链接：
  
      $ git remote rm origin
      $ git remote add origin 'ssh://git@yourprojectlink.git'
  
  这时候你没有 master 分支，所以首先要创建一个：
      
      $ git commit --allow-empty -m "initial commit"
      $ git push -u origin master
      
  如果你使用了 Clone(HTTP), 需要输入用户名和密码。如果你使用了 Clone(SSH), 这时候会提示你 `Permission denied (publickey, keyboard-interactive)`, 这是因为你没有那 public_key 上传到 Phabricator。 点击首页的设置图标，选择 SSH Public Keys 选项栏， 点击 Upload Public Key 按钮，选个名儿，然后将命令行运行 ` cat ~/.ssh/id_rsa.pub` 得到的内容复制到 Public Key 内容框中。如果 `cat ~/.ssh/id_rsa.pub` 之后提示木有，不要方，按如下方式生成：
      
      $ ssh-keygen -t rsa
      
  然后一路回车，生成成功。
  
  == Review 代码
  
  安装好 `arc` 工具之后，执行以下的命令，配置代码仓库的证书：
  
      $ arc set-config default http://172.26.26.26:8081/
      $ arc install-certificate
  
  第一次执行 `arc install-certificate` 会提示你打开一个链接，然后将链接中的 `token` 复制到本地。
  
  然后配置 `editor`, 该编辑器使用来编辑 review 的提交报告的：
  
      $ arc set-config editor vim
  
  键入下面命令来激活 review:
  
      $ arc diff <branch>
  
  完成了 review 的流程后，提交至代码仓库：
  
      $ arc land
  
  == Rokid flow
  
  在实际的开发中，我们要保证 `master` 是随时可以部署的。所以每当需要添加功能的时候，建议创建一个分支， 例如 `add-feature`, 然后将新建的分支上传到代码仓库：
  
      $ git checkout -b add-feature
      $ git push
  
  开发完成后，提交本地分支 `add-feature` 上提交代码，并用过 `arc diff` 激活 review 流程：
  
      $ arc diff
  
  完成 review 之后，通过 `arc land` 命令将代码 merge 到 `master` 分支并上传至远端代码仓库：
  
      $ arc land --onto master --merge add-feature
  
  如果 `add-feature` 分支上有多个 revision 版本，则需要选择 merge 的 revision ID, 一般选择最新的, 例如：
  
      $ arc land --onto master --merge add-feature --revision D16
  
  (NOTE) 运行上面的命令会将本地的 `add-feature` 与 本地的 `msater` 进行 merge, 然后上传到远端的 `master` 分支。并且在执行自动删除本地的 `add-feature` 分支（如果你想保留本地的 `add-feature` 分支，可以手动恢复），但是远端的 `add-feature` 分支仍然存在。
  
  如果不想保留远端的 `add-feature` 分支，可以通过 git 命令手动删除：
  
      $ git push origin :add-feature
  
  或者
  
      $ git push origin --delete add-feature
  
  (NOTE) 如果你的代码仓库是默认设置的话，以上两个命令可能会执行失败，可以让代码仓库创建人或者管理员去修改设置：
  
  {nav Diffusion > rXXX (master) > Edit Repository > Hosting > Allow Dangerous Changes}
  
  点击 `Allow Dangerous Changes` 按钮并同意弹出框。
  
  Good Luky, have fun ~~,and gg~~.
'''
tags: []
isStarred: false
isTrashed: false
